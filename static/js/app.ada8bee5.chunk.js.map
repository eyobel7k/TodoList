{"version":3,"sources":["components/Task.js","App.js"],"names":["styles","StyleSheet","create","item","backgroundColor","padding","borderRadius","flexDirection","alignItems","justifyContent","marginBottom","marginTop","color","itemLeft","flexWrap","borderColor","square","width","height","opacity","marginRight","itemText","maxWidth","fontSize","circular","borderWidth","marginLeft","Task","props","View","style","Text","text","App","useState","task","setTask","taskItems","setTaskItems","showDialog","setShowDialog","setDialogResponse","dialogMessage","setDialogMessage","selectedId","setSelectedId","handleAddTask","cleanedInput","trim","toLowerCase","find","console","log","length","isNaN","test","dialogAction","action","index","itemsCopy","splice","completeTask","container","tasksWrapper","sectionTitle","items","TextInput","input","placeholder","value","onChangeText","onKeyPress","e","keyCode","autoFocus","onSubmitEditing","TouchableOpacity","onPress","addWrapper","addText","map","key","message","dialogContainer","dialog","buttonActions","Button","title","flex","paddingTop","paddingHorizontal","fontWeight","textAlign","writeTaskWrapper","position","paddingVertical","top","right","bottom","left","border","margin"],"mappings":"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","file":"static/js/app.ada8bee5.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\n\nconst Task = (props) => {\n  return (\n    <View style={styles.item}>\n      <View style={styles.itemLeft}>\n        <View style={styles.square}></View>\n        <Text style={styles.itemText}>{props.text}</Text>\n      </View>\n      {/* <View style={styles.circular}></View> */}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"#00080f\",\n    padding: 15,\n    borderRadius: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 20,\n    marginTop: 10,\n   color:'white'\n  },\n\n  itemLeft: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    borderColor:'red',\n  },\n  square: {\n    width: 24,\n    height: 24,\n     backgroundColor: \"white\",\n    opacity: 0.4,\n    borderRadius: 5,\n    marginRight: 15,\n    \n  },\n  itemText: {\n    maxWidth: \"80%\",\n    color:'white',\n    fontSize:35,\n  },\n  circular: {\n    width: 15,\n    height: 15,\n    borderColor: \"#fff\",\n    borderWidth: 2,\n    borderRadius: 5,\n    marginLeft: 50,\n  },\n});\nexport default Task;","import { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport {\n  Keyboard,\n  KeyboardAvoidingViewBase,\n  Platform,\n  StyleSheet,\n  Text,\n  TextInputBase,\n  View,\n  TextInput,\n  Button,\n  TouchableOpacity,\n  Alert,\n} from \"react-native\";\nimport Task from \"./components/Task\";\n\nexport default function App() {\n  const [task, setTask] = useState(\"\");\n  const [taskItems, setTaskItems] = useState([]);\n  const [showDialog, setShowDialog] = useState(false);\n  const [dialogResponse, setDialogResponse] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState(false);\n  const [selectedId, setSelectedId] = useState(-1);\n\n  const handleAddTask = () => {\n    const cleanedInput = task.trim().toLowerCase();\n    // let result = task.map(({ setTaskItems }) => setTaskItems);\n    if (taskItems.find((setTaskItems) => setTaskItems === cleanedInput)) {\n      console.log(\"duplicate\");\n    } else if (\n      cleanedInput.length > 0 &&\n      isNaN(cleanedInput) &&\n      /^[a-zA-Z0-9- -!-']*$/.test(cleanedInput)\n    ) {\n      setTaskItems([...taskItems, task.trim()]);\n      setTask(\"\");\n    }\n  };\n\n\n\n\n\n\n\n\n  const completeTask = (index) => {\n    // console.log(index)\n    let itemsCopy = [...taskItems];\n    setSelectedId(index);\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  const handleKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.keyCode === 13) {\n      handleAddTask();\n    }\n  };\n\n  const openDialogue = (message) => {\n    setShowDialog(true);\n    setDialogMessage(message);\n  };\n\n  const displayDialogue = () => (\n    <View style={styles.dialogContainer}>\n      <View style={styles.dialog}>\n        <Text>{dialogMessage}</Text>\n        <View style={styles.buttonActions}>\n          <Button title=\"Cancel\" onPress={() => dialogAction(false)} />\n          <Button title=\"OK\" onPress={() => dialogAction(true)} />\n        </View>\n      </View>\n    </View>\n  );\n  const dialogAction = (action) => {\n    setDialogResponse(action ? true : false);\n    if (action) {\n      completeTask(selectedId);\n    }\n    setShowDialog(false);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.tasksWrapper}>\n        <Text style={styles.sectionTitle}>Todo List</Text>\n        <View style={styles.items}>\n          <View style={styles.create}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"write a Task\"\n              value={task}\n              onChangeText={(text) => setTask(text)}\n              onKeyPress={handleKeypress}\n              autoFocus={true}\n              onSubmitEditing={handleAddTask}\n            />\n            <View>\n              <TouchableOpacity onPress={() => handleAddTask()}>\n                <View style={styles.addWrapper}>\n                  <Text style={styles.addText}>Add Item</Text>\n                </View>\n              </TouchableOpacity>\n            </View>\n          </View>\n          <View>\n            {taskItems.map((item, index) => {\n              return (\n                <TouchableOpacity\n                  key={index}\n                  // onPress={() => completeTask(index)}\n                  onPress={() =>\n                    openDialogue(\n                      'Are you sure you want to delete \"' + item + '\"'\n                    )\n                  }\n                >\n                  <Task key={index} text={item} />\n                </TouchableOpacity>\n              );\n            })}\n          </View>\n        </View>\n      </View>\n\n      {showDialog && displayDialogue()}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#d3edec\",\n  },\n  tasksWrapper: {\n    paddingTop: 60,\n    paddingHorizontal: 20,\n  },\n  sectionTitle: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"#000\",\n  },\n  items: {\n    marginTop: 30,\n  },\n  writeTaskWrapper: {\n    position: \"absolute\",\n    // bottom: 60,\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 100,\n    backgroundColor: \"#FFF\",\n    borderRadius: 60,\n    borderColor: \"#C0C0C0\",\n    borderWidth: 1,\n    width: 300,\n  },\n  addWrapper: {\n    width: 80,\n    height: 30,\n    backgroundColor: \"#FFF\",\n    borderRadius: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderColor: \"#C0C0C0\",\n    borderWidth: 1,\n    marginTop: 10,\n  },\n  create: {\n    // textAlign:'center',\n    alignItems: \"center\",\n  },\n  addText: {},\n  dialogContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  dialog: {\n    border: \"solid 1px #000\",\n    margin: \"0 auto\",\n    borderRadius: 5,\n    padding: 30,\n    backgroundColor: \"#FFF\",\n  },\n  buttonActions: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    marginTop: 30,\n  },\n});\n"],"sourceRoot":""}